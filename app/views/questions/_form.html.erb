<!-- <%= @question.errors.full_messages.join(', ') %> -->
<%# We use form_for when we're creating a form related to a Rails model. the
    first argument of the form_for must be an ActiveRecord object.
    if the first argument is a new instance of the ActiveRecord class, for
    example, Question.new then the form will automatically send a POST request
    to the standard create action url which is in this case: questions_path %>
<%# if the object you pass to the form_for is persisted (has an id in the DB)
    then Rails will automatically make the form submit a PATCH request with
    URL in this case question_path(@question) (same as show link with PATCH
    request).
    @question variable is persisted in this case so it will have a title and
    a body so those will be pre-populated in their respective fields %>
<!-- <%= form_for @question do |f| %>
  <div>
    <%# we can use f.label and f.text_field to generate a label/text input group
        in this case `title` must be an attribute for the variable you pass to
        form_for which is @question in this case.
        The label will have a`for` attribute that matches the id of the
        generated input field for the title.
        The title input field will have a name attribute that is model_type[field]
        In the example below the `name` attribute for the input field will be:
        question[title].
        The input field will be prepolulated with a value if the @question
        has that attribute value set to something. %>
    <%= f.label :title %>
    <%= f.text_field :title %>
  </div>

  <div>
    <%= f.label :body %>
    <%= f.text_area :body %>
  </div>

  <div>
    <%= f.collection_select(
      :tag_ids, Tag.all, :id, :name, {},
      { multiple: true, class: 'chosen-select' }
    ) %>
  </div>

  <% if !@question.persisted? && current_user.signed_in_with_twitter? %>
    <div>
      <%= f.check_box :tweet_this %>
      <%= f.label :tweet_this %>
    </div>
  <% end %>

  <%# this will automatically generate a submit button. The label for the button
      will depend on the `@question` variable. If @question is a new instance
      then the label of the button will be `Create #{model name capitalized}`.
      If you're not happy with the label, you can pass the label as a first
      arguement: f.submit 'Create'  %>
  <%= f.submit btn_label %>
<% end %> -->

<%= simple_form_for @question, html: { class: 'form-vertical' } do |f| %>
  <%= f.input :title %>
  <%= f.input :body %>

  <%# if you're not using simple_form you must use `f.file_field` %>
  <%= f.input :image %>

  <div class='form-group'>
    <%= f.collection_select(
      :tag_ids, Tag.all, :id, :name, {},
      { multiple: true, class: 'chosen-select form-control' }
    ) %>
  </div>

  <% if !@question.persisted? && current_user.signed_in_with_twitter? %>
    <%# we must provide an `:as` option for this input because `tweet_this` is
        not a field in the database so simple form will default to a text field
        %>
    <%= f.input :tweet_this, as: :boolean %>
  <% end %>
  <%= f.submit btn_label, class: 'btn btn-primary' %>
<% end %>



<script>
  $('.chosen-select').chosen({ width: '300px' });
</script>
